package main

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/blackjack/syslog"
	"golang.org/x/crypto/ssh"
)

var (
	AUTHKEYSFILE string = os.Getenv("HOME") + "/.ssh/authorized_keys"
	CLIENT       string = os.Getenv("SSH_CLIENT")
)

func Debug(format string, a ...interface{}) {
	syslog.Syslogf(syslog.LOG_NOTICE, format, a...)
}

func Log(format string, a ...interface{}) {
	syslog.Syslogf(syslog.LOG_NOTICE, format, a...)
}

func Warn(format string, a ...interface{}) {
	syslog.Syslogf(syslog.LOG_WARNING, format, a...)
}

func syntaxError() {
	fmt.Println("ERROR")
	os.Exit(1)
}

func netskelDB() {
	fmt.Println("Moo")
	os.Exit(0)
}

func fingerprint(method, filename string) {
	hash := "THISISAHASH"

	fmt.Println(hash)
}

func addKey(hostname string) {
	servername, err := os.Hostname()
	now := time.Now().Format("Mon Jan _2 15:04:05 2006")

	privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		Warn("Error generating private key: %v", err)
		os.Exit(1)
	}
	privateKeyPEM := &pem.Block{Type: "RSA PRIVATE KEY", Bytes: x509.MarshalPKCS1PrivateKey(privateKey)}
	pemdata := pem.EncodeToMemory(privateKeyPEM)

	pub, err := ssh.NewPublicKey(&privateKey.PublicKey)
	if err != nil {
		Warn("Error constructing public key: %v", err)
		os.Exit(1)
	}
	pubdata := strings.TrimSpace(string(ssh.MarshalAuthorizedKey(pub)))

	Debug("Appending %d byte public key to %s for %s (%v)", len(pubdata), AUTHKEYSFILE, hostname, CLIENT)

	f, err := os.OpenFile(AUTHKEYSFILE, os.O_APPEND|os.O_WRONLY, 0600)
	if err != nil {
		Warn("Error writing public key: %v", err)
		os.Exit(1)
	}

	defer f.Close()

	if _, err = f.WriteString("restrict " + pubdata + " " + hostname + " " + now + "\n"); err != nil {
		panic(err)
	}

	fmt.Printf("#\n# Netskel private key generated by %v for %v (%v)\n#\n", servername, hostname, CLIENT)
	fmt.Println(string(pemdata))
	//fmt.Println("-- ")
	//fmt.Println(string(pubdata))

	os.Exit(0)
}

func main() {
	syslog.Openlog("netskel-server", syslog.LOG_PID, syslog.LOG_USER)

	if os.Args[0] != "server" {
		syntaxError()
	}

	nsCommand := strings.Split(os.Args[2], " ")
	command := nsCommand[0]

	Log("netskel-server launched for %v with %v", CLIENT, nsCommand)

	//for index, arg := range nsCommand {
	//	fmt.Printf("%2d: %v\n", index, arg)
	//}

	switch command {
	case "netskeldb":
		netskelDB()

	case "sha1":
		filename := nsCommand[1]
		fingerprint("sha1", filename)

	case "addkey":
		key := nsCommand[1]
		addKey(key)

	default:
		syntaxError()
	}

	os.Exit(0)
}
