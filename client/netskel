#!/bin/sh

# Default netskel settings (override in ~/.netskel/config)
NETSKEL_LOGFILE=$HOME/.netskel/activity.log
NETSKEL_LOGFILE_LIMIT=512
NETSKEL_DBFILE=$HOME/.netskel/dbfile
NETSKEL_TMP=$HOME/.netskel/tmp
NETSKEL_RC=$HOME/.netskel/config
NETSKEL_ROOT=$HOME
NETSKEL_IDENTITY=$HOME/.netskel/identity
NETSKEL_PORT=22

HOSTNAME=`hostname`
USERNAME=`whoami`

# Load in our local config variables
if [ -r $NETSKEL_RC ] ; then
 . $NETSKEL_RC
fi

if [ -r $NETSKEL_IDENTITY ] ; then
  NETSKEL_UUID=`grep "CLIENT_UUID" $NETSKEL_IDENTITY | tr -s ' ' | cut -d ' ' -f 3`
fi

# Ensure that DEBUG is set

if [ ${NETSKEL_DEBUG:-0} = 0 ] ; then
  NETSKEL_DEBUG=0
fi

# Functions

netskel_log() {
  echo "$1"
  echo -n `date -u "+%s"` >> $NETSKEL_LOGFILE
  echo " $1" >> $NETSKEL_LOGFILE
}

netskel_trace() {
  echo -n `date -u "+%s"` >> $NETSKEL_LOGFILE
  echo " $1" >> $NETSKEL_LOGFILE
  if [ $NETSKEL_DEBUG = 1 ] ; then
    echo "$1"
  fi
}

netskel_find_executable() {
  netskel_trace "Looking for $1 binary"
  NETSKEL_BIN=`which $1 2>/dev/null`
  if [ ! -x "$NETSKEL_BIN" ] ; then
    unset NETSKEL_BIN
    netskel_trace "Not found"
    return 1
  fi
  netskel_trace "Found at $NETSKEL_BIN"
  eval NETSKEL_PATH_$1=$NETSKEL_BIN
  unset NETSKEL_BIN
  return 0
}

netskel_path_push() {
  if [ -d $1 ] ; then
    PATH=$PATH:$1
  fi
  return 0
}

netskel_die() {
  NETSKEL_DEBUG=1
  netskel_log "$1"
  exit
}

netskel_add_crontab() {
  netskel_log "netskel not found in the crontab, adding it now"

  crontab -l | grep -v netskel > $NETSKEL_TMP/crontab ; \
  echo '1 0 * * * $HOME/bin/netskel sync' >> $NETSKEL_TMP/crontab && \
  crontab $NETSKEL_TMP/crontab && \
  rm $NETSKEL_TMP/crontab
}

netskel_preflight() {
  umask 077

  if [ ! -d $HOME/.netskel ] ; then
    mkdir $HOME/.netskel || netskel_die "Unable to create temporary directory"
  fi

  netskel_trace "- - - `date -u '+%d-%b-%Y @ %T UTC'`"
  netskel_trace "Performing pre-flight checks"


  if [ ! -d $NETSKEL_TMP ] ; then
    netskel_log "Creating temporary directory $NETSKEL_TMP"
    mkdir $NETSKEL_TMP || netskel_die "Unable to create temporary directory"
  fi

  PATH=/bin
  netskel_path_push /sbin
  netskel_path_push /usr/bin
  netskel_path_push /usr/sbin
  netskel_path_push /usr/local/bin
  netskel_path_push /usr/local/sbin
  netskel_path_push /opt/bin
  netskel_path_push /opt/sbin
  netskel_path_push /opt/local/bin
  netskel_path_push /opt/local/sbin
  netskel_path_push $HOME/bin
  netskel_trace "Path set to $PATH"
  
  netskel_find_executable stat
  netskel_find_executable md5
  netskel_find_executable md5sum
  netskel_find_executable ssh
  netskel_find_executable xxd
  netskel_find_executable bc
  netskel_find_executable base64

  if [ -x $HOME/bin/pre-netskel ] ; then
    $HOME/bin/pre-netskel
  fi

  if [ -r $NETSKEL_IDENTITY ] ; then
    SSH="$NETSKEL_PATH_ssh -p $NETSKEL_PORT -i $NETSKEL_IDENTITY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q $NETSKEL_SERVER"
  else
    SSH="$NETSKEL_PATH_ssh -p $NETSKEL_PORT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q $NETSKEL_SERVER"
  fi
}

netskel_cleanup() {
  crontab -l | grep -q "netskel sync" || netskel_add_crontab

  netskel_trace "Cleaning the bugs off the wings"

  tail -$NETSKEL_LOGFILE_LIMIT $NETSKEL_LOGFILE > $NETSKEL_LOGFILE.tmp
  mv $NETSKEL_LOGFILE.tmp $NETSKEL_LOGFILE

  if [ -r $NETSKEL_TMP/install.sh ] ; then
    rm -f $NETSKEL_TMP/install.sh
  fi

  if [ -x $HOME/bin/post-netskel ] ; then
    $HOME/bin/post-netskel
  fi
}

netskel_fetch_file() {
  NETSKEL_TARGET=$NETSKEL_TMP/`basename $1`

  if [ "$NETSKEL_PATH_base64" != "" ] ; then
    $SSH sendbase64 db/$1 $NETSKEL_UUID $USERNAME $HOSTNAME > $NETSKEL_TMP/b64file
    $NETSKEL_PATH_base64 --decode $NETSKEL_TMP/b64file > $NETSKEL_TARGET
    RETVAL=$?
    netskel_trace "Processed $NETSKEL_TARGET via base64 ($RETVAL)"
  else
    $SSH sendfile db/$1 $NETSKEL_UUID $USERNAME $HOSTNAME > $NETSKEL_TMP/xxdfile

    if [ "$NETSKEL_PATH_xxd" != "" ] ; then
      xxd -p -r $NETSKEL_TMP/xxdfile > $NETSKEL_TARGET
      RETVAL=$?
      netskel_trace "Processed $NETSKEL_TARGET via xxd ($RETVAL)"
    else
      if [ "$NETSKEL_PATH_bc" = "" ] ; then
          echo 'This host needs either xxd or bc installed to be able to process'
          echo 'the Netskel hexdump file transfers.  Sorry'
          exit 1
      fi
      # This mess will do the work of xxd (tested on FreeBSD only)
      echo 'ibase=16; obase=8' > $NETSKEL_TMP/bcfile
      cat $NETSKEL_TMP/xxdfile | sed -e 's/\(..\)/\1;/g' | tr 'a-z' 'A-Z' >> $NETSKEL_TMP/bcfile
      cat $NETSKEL_TMP/bcfile | bc | sed -e 's/^/\\\\\\/g' | xargs -n 1 printf > $NETSKEL_TARGET
      RETVAL=$?
      netskel_trace "Processed $NETSKEL_TARGET via sed|tr|bc|sed|xargs|printf ($RETVAL)"
    fi
  fi

  rm -f $NETSKEL_TMP/xxdfile $NETSKEL_TMP/bcfile $NETSKEL_TMP/b64file

  return $RETVAL
}

netskel_sync_dir() {
  fullpath="$NETSKEL_ROOT/$1"
  pathleft="$NETSKEL_ROOT"

  NETSKEL_TARGET_MODE=`grep "$1[[:space:]]" $NETSKEL_DBFILE | head -1 | cut -f 2`

  for pathpart in `echo $1 | sed 's/\// /g'`; do
    if [ ! -d "$pathleft/$pathpart" ] ; then
      netskel_log "C $pathleft/$pathpart/"
      mkdir "$pathleft/$pathpart"
    fi
    pathleft="$pathleft/$pathpart"
  done

  netskel_trace "Changing $fullpath to mode $NETSKEL_TARGET_MODE"
  chmod $NETSKEL_TARGET_MODE $fullpath
}

netskel_sync_file() {
  fullpath="$NETSKEL_ROOT/$1"
  NETSKEL_NEED_SYNC=0

  if [ -f $fullpath ] ; then
    NETSKEL_TARGET_SIZE=`grep "$1[[:space:]]" $NETSKEL_DBFILE | cut -f 4`
    NETSKEL_TARGET_MD5=`grep "$1[[:space:]]" $NETSKEL_DBFILE | cut -f 5`
    NETSKEL_TARGET_MODE=`grep "$1[[:space:]]" $NETSKEL_DBFILE | cut -f 2`

    NETSKEL_FILE_SIZE=$NETSKEL_TARGET_SIZE
    if [ "$NETSKEL_PATH_stat" = "" ] ; then
      if [ ! -x $NETSKEL_PATH_stat ] ; then
        eval `stat -s $fullpath >/dev/null 2>/dev/null` || st_size=`stat --format '%s' $fullpath >/dev/null 2>/dev/null`
        NETSKEL_FILE_SIZE=$st_size
      fi
    fi

    NETSKEL_FILE_MD5=`$NETSKEL_PATH_md5 -q $fullpath 2>/dev/null || $NETSKEL_PATH_md5sum $fullpath | cut -d ' ' -f 1 2>/dev/null`

    netskel_trace "File compare for $1: ($NETSKEL_FILE_SIZE:$NETSKEL_TARGET_SIZE) ($NETSKEL_FILE_MD5:$NETSKEL_TARGET_MD5)"

    if [ ! $NETSKEL_FILE_SIZE = $NETSKEL_TARGET_SIZE ] ; then
      netskel_trace "$1 file size doesn't match"
      NETSKEL_NEED_SYNC=1
    else
      if [ ! $NETSKEL_FILE_MD5 = $NETSKEL_TARGET_MD5 ] ; then
        netskel_trace "$1 MD5 hash doesn't match"
        NETSKEL_NEED_SYNC=1
      fi
    fi

  else
    netskel_trace "$1 not found locally"
    NETSKEL_NEED_SYNC=1
  fi

  if [ $NETSKEL_NEED_SYNC = 1 ] ; then
    netskel_trace "Fetching file $1"
    netskel_fetch_file $1
    NETSKEL_TARGET=$NETSKEL_TMP/`basename $1`

    if [ ! -r $NETSKEL_TARGET ] ; then
      netskel_die "File fetched but then not found"
    fi
    mv $NETSKEL_TARGET $fullpath

    netskel_log "U $1"

    if [ "$1" = "bin/netskel" ] ; then
      chmod 700 $fullpath
      netskel_log "Self-update detected, re-launching"
      $HOME/bin/netskel sync
      exit;
    fi
  fi
  
  netskel_trace "Changing $fullpath to mode $NETSKEL_TARGET_MODE"
  chmod $NETSKEL_TARGET_MODE $fullpath
}

usage() {
  echo "Usage: `basename $0` [ sync | init | push <hostname> ]"
  exit 2
}

# Main Program

netskel_preflight

if [ ! $1 ] ; then
  usage
  exit 2
fi

case $1 in
  sync)
    # Grab latest netskeldb
    $SSH netskeldb $NETSKEL_UUID $USERNAME $HOSTNAME > $NETSKEL_TMP/.netskeldb && mv $NETSKEL_TMP/.netskeldb $NETSKEL_DBFILE || netskel_die "Unable to fetch dbfile"

    # Check all the files in db, see if they need synching
    for file in `grep -v "#" $NETSKEL_DBFILE | cut -f 1 | xargs`; do
      echo -n "$file" | egrep '/$' >/dev/null 2>/dev/null
      RETVAL=$?
      if [ $RETVAL = 0 ] ; then
        netskel_sync_dir $file
      else
        netskel_sync_file $file
      fi
    done

    netskel_cleanup
    exit 0
    ;;

  init)
    echo "Initializing netskel host:"

    if [ -r $HOME/.netskelrc ] ; then
      rm -f $HOME/.netskelrc
    fi

    if [ -r $NETSKEL_IDENTITY ] ; then
      echo "ERROR: $NETSKEL_IDENTITY already exists"
      echo "       Please remove this file if you want to re-init"
      echo " "
      ls -la $NETSKEL_IDENTITY
      echo " "
      exit 1
    fi

    $SSH addkey $USERNAME $HOSTNAME > $NETSKEL_IDENTITY
    chmod 400 $NETSKEL_IDENTITY
    NETSKEL_UUID=`grep "CLIENT_UUID" $HOME/.netskel/identity | tr -s ' ' | cut -d ' ' -f 3`

    if [ "$NETSKEL_UUID" = "" ] ; then
        echo "ERROR: Failed to receive Client ID and Private Key from Netskel Server"
        echo " "
        ls -la $NETSKEL_IDENTITY
        echo " "
        rm -f $NETSKEL_IDENTITY
        exit 1
    fi

    echo " "
    echo "The Netskel server assigned client ID: $NETSKEL_UUID"
    echo " "

    netskel_cleanup
    exit 0
    ;;

  push)
    NETSKEL_INSTALL_SCRIPT=$NETSKEL_TMP/install.sh

    netskel_log "Bundling a Netskel Install Pack for $1"

    echo 'echo "Running Netskel Install Pack on `hostname`"' > $NETSKEL_INSTALL_SCRIPT
    echo 'test -d $HOME/bin || mkdir $HOME/bin' >> $NETSKEL_INSTALL_SCRIPT
    echo 'test -d $HOME/.netskel || mkdir $HOME/.netskel' >> $NETSKEL_INSTALL_SCRIPT
    echo 'chmod 700 $HOME/bin $HOME/.netskel' >> $NETSKEL_INSTALL_SCRIPT

    echo 'cat > $HOME/.netskel/config << EOF' >> $NETSKEL_INSTALL_SCRIPT
    cat $HOME/.netskel/config >> $NETSKEL_INSTALL_SCRIPT
    echo 'EOF' >> $NETSKEL_INSTALL_SCRIPT
    echo 'chmod 600 $HOME/.netskel/config' >> $NETSKEL_INSTALL_SCRIPT

    echo "ssh -Atq -p $NETSKEL_PORT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $NETSKEL_SERVER rawclient > ./bin/netskel && chmod 700 ./bin/netskel && ./bin/netskel init && ./bin/netskel sync && echo '\nNetskel INIT Successful'" >> $NETSKEL_INSTALL_SCRIPT

    netskel_log "Pushing Pack:"
    echo "-- "
    ssh -ATq -o ConnectTimeout=5 $2 /bin/sh < $NETSKEL_INSTALL_SCRIPT || netskel_log "Unable to connect to $2"
    echo "-- "

    netskel_cleanup
    exit 0
    ;;

  *)
    echo "`basename $0`: invalid argument -- $1" >&2
    usage
    ;;
esac


netskel_cleanup
