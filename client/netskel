#!/bin/sh
#
# $Id$
#

# Default netskel settings (override in ~/.netskelrc)
NETSKEL_LOGFILE=$HOME/.netskel/activity.log
NETSKEL_LOGFILE_LIMIT=512
NETSKEL_DBFILE=$HOME/.netskel/dbfile
NETSKEL_TMP=$HOME/.netskel/tmp
NETSKEL_RC=$HOME/.netskel/config
NETSKEL_ROOT=$HOME

# Default settings from netskel repisitory
NETSKEL_USER=%USER%
NETSKEL_HOST=%HOST%
NETSKEL_BASE=%BASE%
NETSKEL_PROTO=%PROTO%

# Load in our local config variables
if [ -r $NETSKEL_RC ] ; then
 . $NETSKEL_RC
fi

# Ensure that DEBUG is set

if [ ${NETSKEL_DEBUG:-0} = 0 ] ; then
    NETSKEL_DEBUG=0
fi

# Functions

netskel_log() {
  echo "$1"
  echo -n `date -u "+%s"` >> $NETSKEL_LOGFILE
  echo " $1" >> $NETSKEL_LOGFILE
}

netskel_trace() {
  echo -n `date -u "+%s"` >> $NETSKEL_LOGFILE
  echo " $1" >> $NETSKEL_LOGFILE
  if [ $NETSKEL_DEBUG = 1 ] ; then
    echo "$1"
  fi
}

netskel_find_executable() {
  netskel_trace "Looking for $1 binary"
  NETSKEL_BIN=`which $1 2>/dev/null`
  if [ ! -x "$NETSKEL_BIN" ] ; then
    unset NETSKEL_BIN
    netskel_trace "Not found"
    return 1
  fi
  netskel_trace "Found at $NETSKEL_BIN"
  eval NETSKEL_PATH_$1=$NETSKEL_BIN
  unset NETSKEL_BIN
  return 0
}

netskel_path_push() {
  if [ -d $1 ] ; then
    PATH=$PATH:$1
  fi
  return 0
}

netskel_die() {
  NETSKEL_DEBUG=1
  netskel_log "$1"
  exit
}

netskel_add_crontab() {
  netskel_log "netskel not found in the crontab, adding it now"

  crontab -l | grep -v netskel > $NETSKEL_TMP/crontab ; \
  echo '1 0 * * * $HOME/bin/netskel sync' >> $NETSKEL_TMP/crontab && \
  crontab $NETSKEL_TMP/crontab && \
  rm $NETSKEL_TMP/crontab
}

netskel_preflight() {
  umask 077

  if [ ! -d $HOME/.netskel ] ; then
    mkdir $HOME/.netskel || netskel_die "Unable to create temporary directory"
  fi

  netskel_trace "- - - `date -u '+%d-%b-%Y @ %T UTC'`"
  netskel_trace "Performing pre-flight checks"


  if [ ! -d $NETSKEL_TMP ] ; then
    netskel_log "Creating temporary directory $NETSKEL_TMP"
    mkdir $NETSKEL_TMP || netskel_die "Unable to create temporary directory"
  fi

  PATH=/bin
  netskel_path_push /sbin
  netskel_path_push /usr/bin
  netskel_path_push /usr/sbin
  netskel_path_push /usr/local/bin
  netskel_path_push /usr/local/sbin
  netskel_path_push /opt/bin
  netskel_path_push /opt/sbin
  netskel_path_push /opt/local/bin
  netskel_path_push /opt/local/sbin
  netskel_path_push $HOME/bin
  netskel_trace "Path set to $PATH"
  
  netskel_find_executable fetch
  netskel_find_executable wget
  netskel_find_executable curl
  netskel_find_executable lynx

  netskel_find_executable stat
  netskel_find_executable md5
  netskel_find_executable md5sum

  if [ -x $HOME/bin/pre-netskel ] ; then
    $HOME/bin/pre-netskel
  fi
}

netskel_cleanup() {
  crontab -l | grep -q "netskel sync" || netskel_add_crontab

  netskel_trace "Cleaning the bugs off the wings"

  tail -$NETSKEL_LOGFILE_LIMIT $NETSKEL_LOGFILE > $NETSKEL_LOGFILE.tmp
  mv $NETSKEL_LOGFILE.tmp $NETSKEL_LOGFILE

  if [ -r $NETSKEL_TMP/install.sh ] ; then
    rm -f $NETSKEL_TMP/install.sh
  fi

  if [ -x $HOME/bin/post-netskel ] ; then
    $HOME/bin/post-netskel
  fi
}

netskel_fetch_with_curl() {
  if [ "$NETSKEL_PATH_curl" = "" ] ; then
    return 1
  fi
  if [ ! -x $NETSKEL_PATH_curl ] ; then
    return 1
  fi
  $NETSKEL_PATH_curl -k -s -o $2 $1 >/dev/null 2>/dev/null
  RETVAL=$?
  if [ $RETVAL = 0 ] ; then
    netskel_trace "fetched $1 to $2 using curl"
  fi
  return $RETVAL
}

netskel_fetch_with_fetch() {
  if [ "$NETSKEL_PATH_fetch" = "" ] ; then
    return 1
  fi
  if [ ! -x $NETSKEL_PATH_fetch ] ; then
    return 1
  fi
  $NETSKEL_PATH_fetch -q -o $2 $1 >/dev/null 2>/dev/null
  RETVAL=$?
  if [ $RETVAL = 0 ] ; then
    netskel_trace "fetched $1 to $2 using fetch"
  fi
  return $RETVAL
}

netskel_fetch_with_wget() {
  if [ "$NETSKEL_PATH_wget" = "" ] ; then
    return 1
  fi
  if [ ! -x $NETSKEL_PATH_wget ] ; then
    return 1
  fi

  $NETSKEL_PATH_wget --no-check-certificate -q -O $2 $1 >/dev/null 2>/dev/null
  if [ ! -r $2 ] ; then
    $NETSKEL_PATH_wget -q -O $2 $1 
  fi

  if [ -r $2 ] ; then
    netskel_trace "fetched $1 to $2 using wget"
    return 0
  else
    return 1
  fi
}

netskel_fetch_file() {
  NETSKEL_TARGET=$NETSKEL_TMP/`basename $1`

  NETSKEL_URL=$NETSKEL_PROTO://$NETSKEL_HOST$NETSKEL_BASE/$NETSKEL_USER/$1

  netskel_fetch_with_curl  $NETSKEL_URL $NETSKEL_TARGET || \
  netskel_fetch_with_fetch $NETSKEL_URL $NETSKEL_TARGET || \
  netskel_fetch_with_wget  $NETSKEL_URL $NETSKEL_TARGET
  RETVAL=$?

  return $RETVAL
}

netskel_sync_dir() {
  fullpath="$NETSKEL_ROOT/$1"
  pathleft="$NETSKEL_ROOT"

  NETSKEL_TARGET_MODE=`grep "$1\W" $NETSKEL_DBFILE | cut -f 2`

  for pathpart in `echo $1 | sed 's/\// /g'`; do
    if [ ! -d "$pathleft/$pathpart" ] ; then
      netskel_log "Creating directory $pathleft/$pathpart"
      mkdir "$pathleft/$pathpart"
    fi
    pathleft="$pathleft/$pathpart"
  done

  netskel_trace "Changing $fullpath to mode $NETSKEL_TARGET_MODE"
  chmod $NETSKEL_TARGET_MODE $fullpath
}

netskel_sync_file() {
  fullpath="$NETSKEL_ROOT/$1"
  NETSKEL_NEED_SYNC=0

  if [ -f $fullpath ] ; then
    NETSKEL_TARGET_SIZE=`grep "$1\W" $NETSKEL_DBFILE | cut -f 4`
    NETSKEL_TARGET_MD5=`grep "$1\W" $NETSKEL_DBFILE | cut -f 5`
    NETSKEL_TARGET_MODE=`grep "$1\W" $NETSKEL_DBFILE | cut -f 2`

    NETSKEL_FILE_SIZE=$NETSKEL_TARGET_SIZE
    if [ "$NETSKEL_PATH_stat" = "" ] ; then
      if [ ! -x $NETSKEL_PATH_stat ] ; then
        eval `stat -s $fullpath >/dev/null 2>/dev/null` || st_size=`stat --format '%s' $fullpath >/dev/null 2>/dev/null`
        NETSKEL_FILE_SIZE=$st_size
      fi
    fi

    NETSKEL_FILE_MD5=`$NETSKEL_PATH_md5 -q $fullpath 2>/dev/null || $NETSKEL_PATH_md5sum $fullpath | cut -d ' ' -f 1 2>/dev/null`

    netskel_trace "File compare for $1: ($NETSKEL_FILE_SIZE:$NETSKEL_TARGET_SIZE) ($NETSKEL_FILE_MD5:$NETSKEL_TARGET_MD5)"

    if [ ! $NETSKEL_FILE_SIZE = $NETSKEL_TARGET_SIZE ] ; then
      netskel_trace "$1 file size doesn't match"
      NETSKEL_NEED_SYNC=1
    else
      if [ ! $NETSKEL_FILE_MD5 = $NETSKEL_TARGET_MD5 ] ; then
        netskel_trace "$1 MD5 hash doesn't match"
        NETSKEL_NEED_SYNC=1
      fi
    fi

  else
    netskel_trace "$1 not found locally"
    NETSKEL_NEED_SYNC=1
  fi

  if [ $NETSKEL_NEED_SYNC = 1 ] ; then
    netskel_trace "Fetching file $1"
    netskel_fetch_file $1
    NETSKEL_TARGET=$NETSKEL_TMP/`basename $1`

    if [ ! -r $NETSKEL_TARGET ] ; then
      netskel_die "File fetched but then not found"
    fi
    mv $NETSKEL_TARGET $fullpath

    netskel_log "U $1"

    if [ "$1" = "bin/netskel" ] ; then
      chmod 700 $fullpath
      netskel_log "Self-update detected, re-launching"
      $HOME/bin/netskel sync
      exit;
    fi
  fi
  
  netskel_trace "Changing $fullpath to mode $NETSKEL_TARGET_MODE"
  chmod $NETSKEL_TARGET_MODE $fullpath
}

# Main Program

netskel_preflight

if [ ! $1 ] ; then
  echo "Usage: `basename $0` [ sync | init  | push <hostname> ]"
  exit 2
fi

if [ "$1" = "sync" ] ; then
  # Grab latest netskeldb
  netskel_fetch_file .netskeldb && mv $NETSKEL_TMP/.netskeldb $NETSKEL_DBFILE || netskel_die "Unable to fetch dbfile"

  # Check all the files in db, see if they need synching
  for file in `grep -v "#" $NETSKEL_DBFILE | cut -f 1 | xargs`; do
    echo -n "$file" | egrep '/$' >/dev/null 2>/dev/null
    RETVAL=$?
    if [ $RETVAL = 0 ] ; then
      netskel_sync_dir $file
    else
      netskel_sync_file $file
    fi
  done

  netskel_cleanup
  exit 0
fi

if [ "$1" = "init" ] ; then
  echo "Initializing netskel host:"

  if [ -r $HOME/.netskelrc ] ; then
    rm -f $HOME/.netskelrc
  fi

  netskel_cleanup
  exit 0
fi

if [ "$1" = "push" ] ; then
  # ping -c 1 -q $2 >/dev/null 2>/dev/null || netskel_die "Host $2 unreachable"

  NETSKEL_INSTALL_SCRIPT=$NETSKEL_TMP/install.sh

  echo 'cat > netskel.uue << EOF' > $NETSKEL_INSTALL_SCRIPT
  uuencode -m $HOME/bin/netskel netskel >> $NETSKEL_INSTALL_SCRIPT
  echo 'EOF' >> $NETSKEL_INSTALL_SCRIPT
  echo 'uudecode netskel.uue' >> $NETSKEL_INSTALL_SCRIPT
  echo 'ls bin/* >/dev/null || mkdir bin' >> $NETSKEL_INSTALL_SCRIPT
  echo 'mv netskel $HOME/bin/netskel' >> $NETSKEL_INSTALL_SCRIPT
  echo 'chmod 755 $HOME/bin/netskel' >> $NETSKEL_INSTALL_SCRIPT
  echo 'rm -f netskel.uue' >> $NETSKEL_INSTALL_SCRIPT
  echo '$HOME/bin/netskel init' >> $NETSKEL_INSTALL_SCRIPT
  echo 'echo "Synching this host for the first time:" && $HOME/bin/netskel sync && echo "Complete!" ; logout' >> $NETSKEL_INSTALL_SCRIPT

  netskel_log "Pushing netskel install to $2"
  ssh -Tq $2 < $NETSKEL_INSTALL_SCRIPT || netskel_log "Unable to connect to $2"

  netskel_cleanup
  exit 0
fi

netskel_cleanup
